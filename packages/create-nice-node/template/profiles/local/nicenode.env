################################################
# nice-node 参数
# 业务参数请另建文件，请勿写在本文件中
# profile=local
################################################

# App code
APP_CODE=<%=appCode%>

# web server 端口号
PORT=3000

# 编译产物输出目录名
# DIST=dist

################################
# check url
################################
# CHECK_URLS_ENABLE=true
# check url 地址
# CHECK_URLS_ENDPOINT=/check_urls

################################
# healthcheck
################################
# HEALTH_CHECK_ENABLE=true
# health check 地址
# HEALTH_CHECK_ENDPOINT=/healthcheck.html

################################
# body-parser
################################
# BODY_PARSER_ENABLE=true

################################
# logger-middleware
################################
# LOGGER_ENABLE=true

################################
# catchThrow-middleware
################################
# CATCH_THROW_ENABLE=true

################################
# logger
################################
# 日志等级[debug/verbose/info/warn/error]
LOG_LEVEL=info
# 日志文件保存的相对目录
LOG_ROOT=logs
# 日志文件名中的日期格式
LOG_FILE_DATE_PATTERN=YYYY-MM-DD
# 日志文件是否压缩
# LOG_FILE_ZIPPED_ARCHIVE=false
# 日志记录中时间格式
# LOG_DATEFORMAT=yyyy-MM-dd HH:mm:ss

################################
# access log
################################
# 是否记录访问日志
# ACCESS_LOG_ENABLE=true
# 访问日志格式
# ACCESS_LOG_FORMAT=:remote-addr - [:date[clf]] ":method :url HTTP/:http-version" :status :res[content-length] - :response-time ms ":referrer" ":user-agent"
# 输出日志前是否在缓冲区暂存
# ACCESS_LOG_BUFFER=false
# 是否在 request 过程立即输出日志
# ACCESS_LOG_IMMEDIATE=false
# 是否跳过日志记录的请求地址，多个用逗号隔开
# ACCESS_LOG_SKIP_ENDPOINTS=/healthcheck.html,/favicon.ico
# 访问日志文件名格式
# ACCESS_LOG_FILENAME=access.%DATE%.log
# 访问日志文件名中的日期格式
ACCESS_LOG_FILENAME_DATEFORMAT=YYYY-MM-DD
# 访问日志文件切分频率
# ACCESS_LOG_FREQUENCY=daily
# 当切割文件或重命名文件时，是否输出在标准输出上输出操作日志
# ACCESS_LOG_VERBOSE=false
# 访问日志中时间格式
# ACCESS_LOG_TIME_STAMP_FORMAT=yyyy-MM-dd HH:mm:ss

################################
# Watcher
################################
# 是否启用 watcher
# WATCHER_ENABLE=false
# watcher host
# WATCHER_HOST=
# 指标前缀
# WATCHER_PREFIX=

################################
# PM2
################################
# PM2 启动模式 [fork/cluster]
PM2_EXEC_MODE=fork
# PM2 启动服务进程的数量
PM2_INSTANCES=1

################################
# autoRegisterRouter
################################
# 是否启用路由文件自动加载功能
AUTO_REGISTER_ROUTER_ENABLE=true
# 路由文件存放目录，{src}会替换成src或dist
# AUTO_REGISTER_ROUTER_ROOR={src}/routes
# 路由文件匹配(正则)规则，{ext}会替换成js或ts
# AUTO_REGISTER_ROUTER_PATTERN=^([^.].*).{ext}(x)?$

################################
# static
################################
# 是否启用静态资源服务器
# STATIC_FILE_ENABLE=true
# 静态文件根目录，多个目录用逗号连接
# STATIC_FILE_ROOR=static

################################
# graphql
################################
# 是否启用 graphql
# GRAPHQL_ENABLE=false
# graphql 地址
# GRAPHQL_ENDPOINT=/graphql
# graphql scheme 文件匹配格式
# GRAPHQL_TYPEDEFS_PATTERN={src}/graphql/**/*.graphql
# graphql resolver 文件匹配格式
# GRAPHQL_RESOLVERS_PATTERN={src}/graphql/**/resolver.{ext}

################################
# koa-pug
################################
# 是否启用 pug
# PUG_ENABLE=true
# 模版根目录
# PUG_BASEDIR=templates
# 模版view文件目录
# PUG_VIEWPATH=templates/pages
